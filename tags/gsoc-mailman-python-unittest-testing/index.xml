<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gsoc Mailman Python Unittest Testing on maxking&#39;s blog</title>
    <link>http://asynchronous.in/tags/gsoc-mailman-python-unittest-testing/index.xml</link>
    <description>Recent content in Gsoc Mailman Python Unittest Testing on maxking&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://asynchronous.in/tags/gsoc-mailman-python-unittest-testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Non-trivial unittests</title>
      <link>http://asynchronous.in/2013/07/19/non-trivial-unit-tests/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://asynchronous.in/2013/07/19/non-trivial-unit-tests/</guid>
      <description>&lt;p&gt;Unit tests are mostly trivial to write with only those assert statements over
the expected results of the function (which is to be tested) instances. But
sometimes it gets difficult to test some functions which require test data and
the place where you store the data is not accessible in the tests.&lt;/p&gt;

&lt;p&gt; was trying to test my &lt;b&gt;gpg&lt;/b&gt; utility which uses a home directory where
all the public and secret key rings are stored(or supposed to be stored by
default) whose hard-coded-path in my project is
&#34;/home/maxking/mailman/mailman/var/gpg&#34; . Usually I can point to
&#34;/home/maxking/mailman/mailman/var/&#34; with the &#34;config.VAR_DIR&#34; variable which
gets initialized when the config layer is initialized during tests. What is a
layer? Mailman uses &#34;zope.testing&#34; framework for testing, it has a concept of
layers which instantiates all the modules of the project so that they can be
used in the tests. Occasionally you can use temporary directories and values for
testing purposes in-case you don&#39;t want the tests to alter your actual data. So
config layer creates a temp &#34;var director&#34; during test runtime. See the code
below for the initialization of the gpg handler:


class GPG:
    def __init__(self, dir):
        self._gpg = None
        self._home = dir
        self._gpg = gnupg.GPG(gnupghome=self._home)

&lt;p&gt;And this module is used as:


  from mailman.utilities.gpg import GPG
  
  gpg_dir = os.path.join(config.VAR_DIR, &#34;gpg&#34;)
  gpg = GPG(gpg_dir)



&lt;p&gt;So the `config layer` creates a new temp var directory every time tests are
run and thus my test data inside &#34;/home/maxking/mailman/mailman/var/gpg&#34; is
never found during the test run. So the workaround that I was suggested by Barry
to copy the test data to whatever temp var directory that is created the tests
are now running smoothly. Below is a snippet of the code how it works:
&lt;/p&gt;

  from mailman.testing.helpers import setup_keyrings, makedirs

  class TestGPG(unittest.TestCase):
    &#34;&#34;&#34;Testing functions in the gpg utility&#34;&#34;&#34;
    
    layer = ConfigLayer
    
    def test_keyring(self):
        &#34;&#34;&#34;verify the keyrings&#34;&#34;&#34;

        gpg_dir = os.path.join(config.VAR_DIR, &#39;gpg&#39;)
        makedirs(gpg_dir)
        setup_keyrings(gpg_dir)
        gpg = GPG(gpg_dir)



&lt;p&gt; And below are the helper functions that are used above.&lt;/p&gt;


  
def test_data_path(filename):
    return os.path.abspath(
        resource_filename(
            &#39;mailman.utilities.tests.data&#39;, filename))

def makedirs(dir):
    try:
        os.makedirs(dir)
    except OSError as e:
        pass

def copy(filename, dst):
    src = test_data_path(filename)
    makedirs(dst)
    try: 
        shutil.copy(src, dst)
    except IOError:
        raise IOError(&#39;File {0} copy to {1} failed&#39;.format(filename, dst))

def setup_keyrings(dst):
    &#34;&#34;&#34;Copy the keyrings to the right place.
    &#34;&#34;&#34;
    keyrings = (&#39;pubring.gpg&#39;, &#39;secring.gpg&#39;)
    
    for keyring in keyrings:
        # The local keyrings live in the .gpg file with the same keyring name
        # in the temporary directory.
        copy(keyring, dst)


</description>
    </item>
    
  </channel>
</rss>
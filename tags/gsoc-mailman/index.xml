<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gsoc Mailman on maxking&#39;s blog</title>
    <link>https://asynchronous.in/tags/gsoc-mailman/index.xml</link>
    <description>Recent content in Gsoc Mailman on maxking&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://asynchronous.in/tags/gsoc-mailman/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GSoC Finale</title>
      <link>https://asynchronous.in/2013/09/24/gsoc-finale/</link>
      <pubDate>Tue, 24 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/09/24/gsoc-finale/</guid>
      <description>&lt;p&gt;So I have pushed my final commit for now for my GSoC project. I will try
to be brief on all the accomplishments and mention concisely
what-is-working.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Signature rule following strict rfc 3156 can now be verified, only
pgp-mime messages are accepted and messages without a (valid) signature
are held.&lt;/li&gt;

&lt;li&gt;SignMessage handler creates multipart/signed message, first of whose
part is the original message formed after all the processing(in
default-posting-pipeline this handler is at last before the message is
send out or copied to nntp or any other queue). It expects a
`multipart/signed` or `multipart/mixeed` message. The signature is
calculated on whole part using the list&#39;s secret key.
&lt;/li&gt;

&lt;li&gt;A List&#39;s key can be created from postorius and other signature
parameters can also be changed from there( only &#39;signature_max_age for
now).&lt;/li&gt;

&lt;li&gt; A user can import his public key from public keyservers( defaults to
ha.pool.sks-keyservers.net) by entering their public key id or they can
copy paste their public key data to upload their public key.( Exceptions
handling is not implemented yet in postorius, if works fine in perfect
situations).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will soon come up with post more detailed about how my project functions,
but for now if anyone wants to have a look my code it
is &lt;a href=&#34;https://code.launchpad.net/~raj-abhilash1&#34;&gt;here&lt;/a&gt;&lt;/p&gt;.
</description>
    </item>
    
    <item>
      <title>Midterm Report</title>
      <link>https://asynchronous.in/2013/08/09/midterm-report/</link>
      <pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/08/09/midterm-report/</guid>
      <description>&lt;p&gt;
This is report of my GSoC project - OpenPG integration with GNU Mailman for
midterm. The code is updated at
my &lt;a href=&#34;https://code.launchpad.net/~raj-abhilash1/mailman/master&#34;&gt; launchpad
branch&lt;/a&gt;.

&lt;p&gt;
  &lt;b&gt;Accomplishments:&lt;/b&gt; 
&lt;ul&gt;
  &lt;li&gt; A signature rule(src/mailman/rules/signature.py) to check for OpenPGP
     signature in a message, incase the signature is found it tries to verify the
     message using gpg utility.&lt;/li&gt;

  &lt;li&gt; A gpg utility(src/mailman/utilities/gpg.py) to perform all the signature
    related tasks using `python-gnupg`(v0.3.4). It signs and verifies the signature.&lt;/li&gt;
    
  &lt;li&gt; A signmessage handler(src/mailman/handlers/signmessage.py) to sign the
    outgoing message using the gpg utility.(Signing a message is still incomplete in
    the sense we do not have a way to store and use keys. For now it has a
    pubring.gpg and secring.gpg inside (var/gpg/). It will be replaced with actual
    keyrings in future.)&lt;/li&gt;

  &lt;li&gt; Tests for each of the three modules above. Testing gpg.py was a small
    challenge(for me).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;b&gt;Issues and Roadblocks:&lt;/b&gt;
  &lt;ul&gt;
    &lt;li&gt; Signature verification using `python-gnupg` was a PITA to me for
      sometime. The way it accepts the string and signature for detached
      signature is not documented at all and is converse of what I could think
      of. It just occurred to me to try out the other possibility which turned
      out to be the right way.&lt;/li&gt;
  
    &lt;li&gt; Version control was also a issue that I encountered. Initially I
      started to work on git mirror of mailman. When I tried to port the code
      back to bazaar and push to github it took me(and others) a lot of
      brainstorming. Finally I did that using bzr-git.&lt;/li&gt;
  
    &lt;li&gt; Deciding the structure of the signed message that we were going to send
      out. Initially it was decided to leave sender&#39;s signature intact so that
      if someone wants to verify it he can do it, but there can-not be two
      &#39;pgp-signature&#39; parts in a conventional multipart/signed message. I wrote
      the code to follow
      an &lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-openpgp-multsig-02&#34;&gt;
      internet-draft&lt;/a&gt; i discovered one-day. But then I commented out the code
      and also added another format.&lt;/li&gt;
    &lt;pre&gt;
      mutipart/alternative {
            multipart/signed { text/plain, application/pgp-signature }
            multipart/signed { text/plain, application/pgp-signature }
      }
    &lt;/pre&gt;
  &lt;/ul&gt;
&lt;p&gt;
  Some furthur assistance and research on which format do MUAs support the
  most should be implemented.
  
  * python-gnupg does not provide any way to search for keys based on
  key-data like email-address. I need some more work to get this working.

&lt;p&gt;
  &lt;b&gt;Future Plan:&lt;/b&gt;
  The next plans for this project include testing all the above parts
  thoroughly and then moving on to creating a PKI for the key. Also the
  settings for the list-manager to adjust a few options related to signed
  lists - like time limit(decided from date in signature) to consider a
  message old, and also implementing this in code.
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on maxking&#39;s blog</title>
    <link>http://asynchronous.in/tags/git/index.xml</link>
    <description>Recent content in Git on maxking&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://asynchronous.in/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Prevent Git Push</title>
      <link>http://asynchronous.in/2016/05/16/Prevent-Git-Push</link>
      <pubDate>Mon, 16 May 2016 13:23:08 +0000</pubDate>
      
      <guid>http://asynchronous.in/2016/05/16/Prevent-Git-Push</guid>
      <description>&lt;p&gt;It happens with me sometimes that I push to repositories that I must not push
to. Being a &lt;a href=&#34;http://list.org&#34;&gt;GNU Mailman&lt;/a&gt; core-developer, I have push access to all the
repositories. But, we always add changes to the master repo using
merge-requests, even Barry does the same. But with my poor [Git] skills, I end
up sometimes pushing to the wrong repository which might lead to bad code inside
of the main repository. So a small nifty trick to avoid that is to make the
repository read-only. This is how I did it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config remote.upstream.pushurl &amp;quot;you really didn&#39;t want to do that&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git Undo</title>
      <link>http://asynchronous.in/2014/10/05/git-amend/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://asynchronous.in/2014/10/05/git-amend/</guid>
      <description>

&lt;p&gt;Here are some useful git commands that helps to undo changes you knowingly
or accidentally(my case) committed to a repo.&lt;/p&gt;

&lt;h3 id=&#34;git-commit-ammend&#34;&gt;git commit - -ammend&lt;/h3&gt;

&lt;p&gt;While this may be a very known feature of git, I still would add a note
about it here for my own reference. Git has this awesome feature where
you can amend you last commit. It comes pretty handy when you accidentally
forgot to add something to you last commit.&lt;/p&gt;

&lt;p&gt;All you have to do is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;lt;file&amp;gt;
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can visit &lt;a href=&#34;http://git-scm.com/book/en/Git-Basics-Undoing-Things&#34;&gt;here&lt;/a&gt; for more info about this command.&lt;/p&gt;

&lt;h3 id=&#34;git-reset&#34;&gt;git reset&lt;/h3&gt;

&lt;p&gt;This command as a very neat &lt;a href=&#34;http://bazaar.canonical.com/en/&#34;&gt;bzr&lt;/a&gt; counterpart called &lt;code&gt;uncommit&lt;/code&gt;. While
reset can accomplish what &lt;code&gt;uncommit&lt;/code&gt; did it has many more features. For
simply undoing the last commit you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To also remove the changes in the last commit you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This made me wonder what this command does(I never used this command before)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apparently this command helps you undo your last commit and everything you&amp;rsquo;d
staged. Also if you had already pushed your code to some remote repository then
you will have to force the next push because one of the commits was removed( and
most probably one or more would have been added before push) which may lead the
git to believe that the remote and local branches have diverged. Use &lt;code&gt;-f&lt;/code&gt; (to
force the push) flag with a little care, it may prove deleterious at times.&lt;/p&gt;

&lt;p&gt;More info about this command can be viewed &lt;a href=&#34;http://git-scm.com/docs/git-reset&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mailman on maxking&#39;s blog</title>
    <link>https://asynchronous.in/tags/mailman/index.xml</link>
    <description>Recent content in Mailman on maxking&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://asynchronous.in/tags/mailman/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Are you mocking me?</title>
      <link>https://asynchronous.in/2013/07/19/are-you-mocking-me/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/07/19/are-you-mocking-me/</guid>
      <description>&lt;p&gt;Unit testing is one of the most important parts of any project. TDD (test
driven development) is a good habit to cultivate, in case you are not convinced,
you don&#39;t know about TDD or you have never given it a try. I started using
partial TDD recently, yes only partial for what I follow is that first I write a
rough outline of the code, then I write tests and then I keep on re-factoring my
code till all the tests are passing. Though there is a little flaw in this
method according to me -- although writing tests are mostly trivial with those
easy assert statements, sometimes you may write wrong tests which make you write
wrong code too. So put more thought in writing tests than in writing
code. Although many times you will agree with me that TDD is annoying, it does
not let you do what you actually want to do (I mean the &#34;way&#34; you want to do it,
the result may be same).&lt;/p&gt;
&lt;p&gt;
So in this post I am going to talk about mocks. What are mocks? There are some
magical functions which do some abracadabra on your existing function and make
them return anything that you want without actually even thinking what they are
returning. Did I personify it a little too much? Let me explain in a little
detail with the example of where I used mocking.&lt;/p&gt;

&lt;p&gt;
Unit tests should be independent of environment and any other module, so that
each module can be developed separately without affecting the development of
other modules. But many a times one module depends on others and in that case
it gets messy to test those functions. In my case it was the &#34;signature&#34; rule
which uses &#34;gpg&#34; utility to verify signature of messages. Here is a snippet of
the code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mailman.utilities.gpg&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GPG&lt;/span&gt;
 
&lt;span style=&#34;color: #a6e22e&#34;&gt;@implementer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(IRule)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Signature&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Look for pgp-signature.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;The message has pgp-signature as application/pgp-signature part&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_gpg&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mlist,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msgdata):&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;See `IRule&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;gpg_dir&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;VAR_DIR,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;gpg&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_gpg&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GPG(gpg_dir)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if you see in line 1 we import the GPG class from &lt;i&gt;gpg&lt;/i&gt; utility. But
when we write tests we don&#39;t want this function to &#34;actually&#34; create an instance
of GPG class and &#34;actually&#34; verify the signature because it is not a function of
signature rule and any errors or breakpoints in gpg utility may cause our tests
for the &#34;working&#34; signature rule to fail. So what do we do? We mock and then we
rock ;-). We mock the GPG instance created in signature rule to return &#34;any
specific value&#34; irrespective of the input. See the code below:&lt;/p&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mock&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestSignatureMime&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(unittest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TestCase):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test the signature handler.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Dummy_GPG_True&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;    
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dir):&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_dir&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dir&lt;/span&gt;
        
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;verify_inline_signature&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data):&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;verify_detached_signature&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data):&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;


  &lt;span style=&#34;color: #a6e22e&#34;&gt;@mock.patch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;mailman.rules.signature.GPG&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Dummy_GPG_True)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_good_signature&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_rule&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;check(self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_mlist,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_msg,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{})&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;assertTrue(result)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; &lt;/p&gt;

</description>
    </item>
    
    <item>
      <title>Rules and Chains</title>
      <link>https://asynchronous.in/2013/06/30/rules-and-chains/</link>
      <pubDate>Sun, 30 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/06/30/rules-and-chains/</guid>
      <description>&lt;p&gt;This post talks about the basic messaging flow in mailman and then a little
detail about what are rules and chains in Mailman. So a message can be injected
in mailman system using a LMTP server via
LMTP. &lt;a href=&#34;http://tools.ietf.org/html/rfc2033#section-4&#34;&gt;LMTP&lt;/a&gt;(Local Mail
Transfer Protocol) is a derivative of ESMTP(Extended SMTP), which is a extension
of well known SMTP(Simple Mail Transfer Protocol). LMTP runner parses the
message into a tuple of type (mailing_list, message, message_data) and stores it
in a serialized form
called &lt;a href=&#34;http://docs.python.org/2/library/pickle.html&#34;&gt;python
pickle(.pck)&lt;/a&gt; file, which is then queued in either one of &lt;i&gt;incoming queue,
bounce queue or command processing queue&lt;/i&gt;. If the message parsing fails then
it is discarded. Queues are nothing but a set of directories managed
by &lt;i&gt;switchboards&lt;/i&gt;, where all the messages are stored till a &lt;i&gt;runner&lt;/i&gt;
wakes up and sends them one by one for processing according to the queue that
they were queued in, e.g. IN runner sends to file to pipeline queue where i
Below is a graph is decided if the message will be accepted, discarded or held
for moderation. Below is a graph depicting the message flow in mailman.&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://asynchronous.in/images/mailman-messaging-flow.png&#34; height=&#34;400px&#34;&gt;
&lt;/center&gt;
&lt;p&gt;How is it decided if a message is &#39;fit&#39; for posting? This process is
called &lt;i&gt;Moderation&lt;/i&gt; where a message is tested against a set of rules. Rules
are simple checks which return True if the rule hits and False in-case it
misses. Moderation does not change anything in message, but it may record the
processing information(like rule hits and misses) information in a metadata
dictionary. Each rule has the following structure:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;@implementer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(IRule)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;New_Rule&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mlist,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msgdata):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;foobar:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can write your own rules to check whatever criteria you want mailman to
check before accepting the message. All the rules reside
inside &lt;b&gt;/src/mailman/rules/&lt;/b&gt; in mailman source code. All of the rules are
arranged in a sequential manner to create a &lt;b&gt;chain&lt;/b&gt;. Each list has two
default start chains associated with it - first for normal postings and second
one is for admin postings. The incoming runner checks who the message is
addressed to and accordingly the moderation occurs for admin or normal postings.
&lt;/p&gt;

&lt;p&gt;The &lt;b&gt;default-builtin-chain&lt;/b&gt; has a predefined list of rules to check
before the message is discarded, held or accepted. In mailman3 the list is as
follows in the order in which they are called:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;_link_descriptions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;approved&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;accept&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;emergency&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hold&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;discard&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Determine whether the member or nonmember has an action shortcut.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;member-moderation&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;moderation&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Do all of the following before deciding whether to hold the message.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;discard&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;administrivia&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;implicit-dest&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;max-recipients&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;max-size&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;news-moderation&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;no-subject&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;suspicious-header&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;defer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None),&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Now if any of the above hit, jump to the hold chain.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;any&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hold&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Take a detour through the header matching chain, which we&amp;#39;ll create&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# later.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;truth&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;detour,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;header-match&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Check for nonmember moderation.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;nonmember-moderation&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;moderation&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Finally, the builtin chain jumps to acceptance.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;truth&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LinkAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jump,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;accept&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
     &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above list each entry consists of a tuple of the
form &lt;span class=&#34;inline-code&#34;&gt; (&#39;rule_name&#39;, LinkAction.action,
&#39;target&#39;)&lt;/span&gt;. The first element ,as evident from the name, is the name of
the rule that is to be called, the second element tell about what action is
taken if the rule hits(or return True). The last part is the target queue to
which the message is copied to if the rule hits(or you may customise it of course
for when rule misses), it is `None` incase the rule does not have
action. According to your convenience you can create your own chains. In the
above list the &lt;b&gt;signature&lt;/b&gt; rule is the one I added to check for
openpgp-signature.
&lt;/p&gt;

</description>
    </item>
    
    <item>
      <title>Gsoc 2013 - Pilot!</title>
      <link>https://asynchronous.in/2013/06/12/gosc-into/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/06/12/gosc-into/</guid>
      <description>&lt;p&gt;In this post I will first start with my introduction in brief and then move
on to my gsoc project. I am a undergrad student
at &lt;a href=&#34;http://iitkgp.ac.in&#34;&gt;Indian Institute of Technology, Kharagpur&lt;/a&gt;
doing my majors in Department of Metallurgical and Materials Engineering
expecting to pass out in 2015. This summer I will be working for GNU Mailman
under Python Software Foundation for my gsoc project -
&lt;i&gt;Implementation of OpenPGP with Mailman.&lt;/i&gt;&lt;p&gt;

&lt;center&gt;
&lt;img src=&#34;https://asynchronous.in/images/mailman.png&#34; id=&#34;mailman_logo&#34;&gt;
&lt;img src=&#34;https://asynchronous.in/images/python-logo.gif&#34; id=&#34;python-logo&#34;&gt;
&lt;/center&gt;

&lt;p&gt;
While many of you might be aware about what OpenPGP/GPG is, but for those of you
who don&#39;t I will try to introduce it in brief. OpenPGP is the world&#39;s most
widely used email encryption/signing standard. It was originally derived from
PGP( Pretty Good Privacy ), first created
by &lt;a href=&#34;https://www.philzimmermann.com/EN/background/index.html&#34;&gt;Phil
Zimmermann&lt;/a&gt; in 1991. GPG( Gnu Privacy Guard ) is complete free implementation
of OpenPGP and comes with most of linux distros today with a default command
line and various other GUI tools. Although I have mentioned GPG in reference to
emails, it can be used to sign/encrypt any text or file. You can encrypt files
on your disk. If you see its actually analogous to email -- you are sending some
encrypted data to future-you and want that the data remains same and protected
when future-you receives it.
&lt;/p&gt;
&lt;p&gt;
I remember when first time I asked Steve about how should OpenPGP be implemented
in mailman? He answered &#34;&lt;i&gt;It depends on what OpenPGP means to you&lt;/i&gt;&#34;. There
are a lot of things that you can do with OpenPGP but not all is of our interest
here. A very brief description of my project is : You digitally sign your email;
send it to mailman; mailman checks your signature(analogous to physical
signatures); verifies that its you; mailman then signs the emails itself; sends
it to all the subscribers. You want to know what &lt;i&gt;Mailman&lt;/i&gt;
is? &lt;a href=&#34;http://www.list.org/&#34;&gt; Mailman &lt;/a&gt; is the GNU mailing list
software which can be used for e-newsletters and few other purposes
too. Currently Mailman3 is under &lt;a href=&#34;https://launchpad.net/mailman&#34;&gt;
development &lt;/a&gt; along with its web interface(Postorius)and the
archiver(Hyperkitty).&lt;/p&gt;
&lt;p&gt;
So coming back to my project, what do you actually mean by signing an email? A
typical OpenPGP signed message looks like this:
&lt;/p&gt;
&lt;pre&gt;
  -----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Kindly reply in a signed email only.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJRuU57AAoJEPVZtmCk10dURYUH/2FPPllsJcXhL3nXLkqT3Zc0
v/vjc0AGgQPj7/Ir9ENxOjgzQ/Mvp5HAMTE1jk+0wsF0Ma8HAu8SxtuFSpgsa78Z
FqkfHYtwvHsErdNOy6hfjEZG6h6I+Y1lKO6B/aQ2trEy1ZTUWyJx9bK0u0VR8JSc
xaUw+YNAAWDzKPac9XLdUTbL4/2gPEeX/mqs0wkpn+2MXMp3Tj1Vf6E829C3NKKq
VkUTtVzFoiEHdh1axmIBea/8dLxqoDVAuzUJyt9zxDjz/8p0ZweLUFk0XGbwpiqk
qn7nw1UGgkDyLxk77o5QMorFB7B/zJjT3FJGnTSwT3GBLelrD6V+rIrYuq/BH0s=
=psBF
-----END PGP SIGNATURE-----

&lt;/pre&gt;
&lt;p&gt;
The &lt;b&gt;Hash&lt;/b&gt; tells about the hashing algorithm used to create the signature,
then there is the actual message followed by the signature. This is a ascii
coded signature so that it can be attached in emails without problems of
unsupported charset. The signature is actually a gibberish text created by
processing your message, using your secret-key, which is very difficult to
reproduce without your secret-key. Because of this reason it acts as your
signature, a mark of your &lt;i&gt;ownership&lt;/i&gt; of the message. I will come up with a
detailed post on OpenPGP signature types and application soon.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
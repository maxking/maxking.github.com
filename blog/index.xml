<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on maxking&#39;s blog</title>
    <link>https://asynchronous.in/blog/</link>
    <description>Recent content in Blogs on maxking&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Aug 2017 09:40:53 +0000</lastBuildDate>
    
	<atom:link href="https://asynchronous.in/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How does traceroute work?</title>
      <link>https://asynchronous.in/2017/08/06/How-does-traceroute-work/</link>
      <pubDate>Sun, 06 Aug 2017 09:40:53 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/08/06/How-does-traceroute-work/</guid>
      <description>How does traceroute work? traceroute is a tool that people often use to determine the path of a packet as it starts from your machine to your destination server. On Ubuntu systems you can install it using the following command:
$ sudo apt install traceroute  Then you can use it to trace the route back to let’s say this server (asynchronous.in) :
$ traceroute asynchronous.in traceroute to asynchronous.in (104.</description>
    </item>
    
    <item>
      <title>WeeChat &#43; Nginx</title>
      <link>https://asynchronous.in/2017/07/19/WeeChat---Nginx/</link>
      <pubDate>Wed, 19 Jul 2017 08:43:12 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/07/19/WeeChat---Nginx/</guid>
      <description>WeeChat + Nginx I talked before about different solutions for persistent IRC and how I settled on using WeeChat. This post is about how I use the relay feature in WeeChat to interact with it remotely.
WeeChat has a remote user protocol called as relay protocol that people can use to connect WeeChat clients to remote running instances of it. It is helpful when you want to run WeeChat on a remote server and connect using clients from various different places.</description>
    </item>
    
    <item>
      <title>Sending email from Django in Google Cloud using Amazon SES</title>
      <link>https://asynchronous.in/2017/07/12/Sending-email-from-Django-in-Google-Cloud-using-Amazon-SES/</link>
      <pubDate>Wed, 12 Jul 2017 15:30:35 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/07/12/Sending-email-from-Django-in-Google-Cloud-using-Amazon-SES/</guid>
      <description>Sending email from Django in Google Cloud using Amazon SES First question to this from many people would be Why?
The simple answer is that I have free credits in GCloud and SES is simple and cheap to send emails. I don’t want a full GApps account to to send emails.
After you have signed up for Amazon SES and configured your domains and sending address, you need to configure your GCloud server to send emails via SES.</description>
    </item>
    
    <item>
      <title>Articles</title>
      <link>https://asynchronous.in/2017/07/05/Articles/</link>
      <pubDate>Wed, 05 Jul 2017 12:57:34 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/07/05/Articles/</guid>
      <description>Articles  Upspin - seems to be a new file system from Google aimed at secure distributed storage. The main aim of the file system is to be secure and not fast. Linux Insides Book - is a very good online resource if you want to read more about the detailed internals of how Linux actually works. It start from the initial boot process and goes deep into how each component in the boot process is initialized.</description>
    </item>
    
    <item>
      <title>HOWTO: Create a .deb package</title>
      <link>https://asynchronous.in/2017/07/03/HOWTO-Create-a-.deb-package/</link>
      <pubDate>Mon, 03 Jul 2017 20:17:27 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/07/03/HOWTO-Create-a-.deb-package/</guid>
      <description>HOWTO: Create a .deb package This is basic tutorial on how to get started with building debian packages. It mostly assumes that that the package you are trying to build is either using make or some other simple build system.
To get some more details about options and other advanced methods and tooling to build .deb packages, see this post. It is a tutorial to build a debian package.</description>
    </item>
    
    <item>
      <title>HOWTO: Release a signed docker image</title>
      <link>https://asynchronous.in/2017/07/03/HOWTO-Release-a-signed-docker-image/</link>
      <pubDate>Mon, 03 Jul 2017 20:17:23 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/07/03/HOWTO-Release-a-signed-docker-image/</guid>
      <description>HOWTO: Release a signed docker image First, install notary from one of the released versions.
Then, you need to build a new image with a specific tag, lets say you are building an image called maxking/mailman-web and you decide to sign the testing tag:
$ docker build --disable-cotent-trust=false -t maxking/mailman-web:latest .  The above command will build the image and then ask you to initialize a few keys if you haven’t yet created the keys.</description>
    </item>
    
    <item>
      <title>HOWTO: Release on PyPI</title>
      <link>https://asynchronous.in/2017/07/02/HOWTO-Release-on-PyPI/</link>
      <pubDate>Sun, 02 Jul 2017 23:06:47 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/07/02/HOWTO-Release-on-PyPI/</guid>
      <description>HOWTO: Release on PyPI These are some commands that is meant to keep a track of how to release a package on PyPI, python packaging index.
Before you release, make sure that you have pull the updated version of the project from your source control website (Github/Gitlab) , removed all the debug statements, and updated the versions in documentation.
Then, the first step is to tag the release in version control, here are examples for git:</description>
    </item>
    
    <item>
      <title>Email with notmuch and astroid</title>
      <link>https://asynchronous.in/2017/04/21/Email-with-notmuch-and-astroid/</link>
      <pubDate>Fri, 21 Apr 2017 10:51:03 +0000</pubDate>
      
      <guid>https://asynchronous.in/2017/04/21/Email-with-notmuch-and-astroid/</guid>
      <description>Email is an integral part of our everyday life. I have spent a large amount of time trying to experiment with different email clients available on Linux. I have tried Thunderbird, Evolution, notmuch with emacs, mutt, mu4e.
Since I am a Linux user, the list above includes only the clients compatible with Linux, particularly Debian/Ubuntu ecosystem. You can classify most of the email clients in two broad workflow categories
 Folder based workflow - This kind of workflow means you have separate folders for all the kinds of emails you receive.</description>
    </item>
    
    <item>
      <title>Persistant IRC Setup</title>
      <link>https://asynchronous.in/2017/03/15/Persistant-IRC-Setup/</link>
      <pubDate>Wed, 15 Mar 2017 12:57:20 -0700</pubDate>
      
      <guid>https://asynchronous.in/2017/03/15/Persistant-IRC-Setup/</guid>
      <description>IRC stands for Internet Relay Chat, a text based chat network that is commonly used by programmers and open source community to collaborate over projects. You can read more about it in the above linked Wikipedia article.
IRC is very lightweight and really easy to use, although it has a few shortcomings when you compare it to other messaging apps/technologies that exist today, biggest of which is persistence. It is a synchronous chat.</description>
    </item>
    
    <item>
      <title>Move to Hugo</title>
      <link>https://asynchronous.in/2017/02/08/Move-to-Hugo/</link>
      <pubDate>Wed, 08 Feb 2017 13:02:38 -0800</pubDate>
      
      <guid>https://asynchronous.in/2017/02/08/Move-to-Hugo/</guid>
      <description>I have been planning to rejuvenate this blog with a new design and hopefully some good posts! Before this, I used to publish this blog using Jekyll which is a great tool if you want to serve static website using Github Pages.
Jekyll is written in Ruby, which is one of the reasons I was planning to move away from it. I don&amp;rsquo;t have anything against the language, but if you want to install Jekyll locally to test out your pages, you have to install the whole Ruby toolchain on your machine.</description>
    </item>
    
    <item>
      <title>Prevent Git Push</title>
      <link>https://asynchronous.in/2016/05/16/Prevent-Git-Push/</link>
      <pubDate>Mon, 16 May 2016 13:23:08 +0000</pubDate>
      
      <guid>https://asynchronous.in/2016/05/16/Prevent-Git-Push/</guid>
      <description>It happens with me sometimes that I push to repositories that I must not push to. Being a GNU Mailman core-developer, I have push access to all the repositories. But, we always add changes to the master repo using merge-requests, even Barry does the same. But with my poor [Git] skills, I end up sometimes pushing to the wrong repository which might lead to bad code inside of the main repository.</description>
    </item>
    
    <item>
      <title>SSH ProxyCommand</title>
      <link>https://asynchronous.in/2016/05/04/ssh-proxy/</link>
      <pubDate>Wed, 04 May 2016 11:40:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2016/05/04/ssh-proxy/</guid>
      <description>Problem : Some servers in my university are beind firewall and it is difficult to ssh to those servers as I always use a VPN service on my primary laptop. To be able to ssh, one must be inside the university or use the university VPN.
It is possible to ssh to a public facing server and go through that to any server inside of the unversity. It is almost like running a campus VPN, but it is a 2 step process.</description>
    </item>
    
    <item>
      <title>Basic GDB</title>
      <link>https://asynchronous.in/2016/03/17/gdb-intro/</link>
      <pubDate>Thu, 17 Mar 2016 02:50:24 +0000</pubDate>
      
      <guid>https://asynchronous.in/2016/03/17/gdb-intro/</guid>
      <description>GDB(The GNU Project Debugger) is one of the most awesome softwares ever built for C programmers. I recently started to write some code in C, specifically trying out socket programming and some other stuff. I had a very basic problem about how to debug a variable (bytes) without using the printf. I have been using printf since always to debug softwares in C and Python, but lets see something new today.</description>
    </item>
    
    <item>
      <title>Python&#39;s GIL</title>
      <link>https://asynchronous.in/2015/12/10/part1-gil/</link>
      <pubDate>Thu, 10 Dec 2015 04:30:24 +0000</pubDate>
      
      <guid>https://asynchronous.in/2015/12/10/part1-gil/</guid>
      <description>Recently I got very interested to explore about the GIL or the Global Interpreter Lock in Python that has been a topic of flame wars since forever. Global interpreter lock is a lock on the python interpreter, that a thread must acquire in order to run. Because of this, effectively any python program can have only one thread running at a time on one instance of python interpreter. However, it has been a common belief that threaded programming in Python doesn&amp;rsquo;t make any sense at all due to GIL, but that is not actually true.</description>
    </item>
    
    <item>
      <title>Gitlab CI?</title>
      <link>https://asynchronous.in/2015/07/14/gitlab-ci/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2015/07/14/gitlab-ci/</guid>
      <description>Note: This post is now outdated. GNU Mailman now has a new container image for running tests and this time it just works. 
Being one of the core developers of GNU Mailman, I took up the task to setup a Continuous Integration server for Mailman. While looking for a service using FOSS and was free to use I stumbled upon Gitlab CI. There were several other options to choose from, but none of them fulfilled our requirement of using FOSS.</description>
    </item>
    
    <item>
      <title>Git Undo</title>
      <link>https://asynchronous.in/2014/10/05/git-amend/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2014/10/05/git-amend/</guid>
      <description>Here are some useful git commands that helps to undo changes you knowingly or accidentally(my case) committed to a repo.
git commit - -ammend While this may be a very known feature of git, I still would add a note about it here for my own reference. Git has this awesome feature where you can amend you last commit. It comes pretty handy when you accidentally forgot to add something to you last commit.</description>
    </item>
    
    <item>
      <title>Sshuttle VPN to bypass proxy</title>
      <link>https://asynchronous.in/2014/03/28/vpn-sshuttle/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2014/03/28/vpn-sshuttle/</guid>
      <description>Proxy servers in my college has made my life like a living hell. Blocking IRC and SSH is the worst thing that you can do to a developer I suppose. For past few years I have been trying to totally eliminate the problems associated with proxy, but was never successful. My previous attempt was to create a ssh tunnel using a amazon-ec2 instance and create a socks proxy to be used by applications.</description>
    </item>
    
    <item>
      <title>GSoC Finale</title>
      <link>https://asynchronous.in/2013/09/24/gsoc-finale/</link>
      <pubDate>Tue, 24 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/09/24/gsoc-finale/</guid>
      <description>So I have pushed my final commit for now for my GSoC project. I will try to be brief on all the accomplishments and mention concisely what-is-working.
  Signature rule following strict rfc 3156 can now be verified, only pgp-mime messages are accepted and messages without a (valid) signature are held. SignMessage handler creates multipart/signed message, first of whose part is the original message formed after all the processing(in default-posting-pipeline this handler is at last before the message is send out or copied to nntp or any other queue).</description>
    </item>
    
    <item>
      <title>Structure of Email</title>
      <link>https://asynchronous.in/2013/09/12/message-structure/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/09/12/message-structure/</guid>
      <description>This week I was busy investigating which kind of email does MUAs accept and display nicely. Now wait! What does *kind of email* and *MUA* mean?
Emails that you use everyday are of various types, much more than you would have though before. There are emails which can remove styling depending on the mail client where you are viewing the email. The email clients are generally called as MUA(Mail User Agent).</description>
    </item>
    
    <item>
      <title>GSoC Updates</title>
      <link>https://asynchronous.in/2013/08/28/updates-gsoc/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/08/28/updates-gsoc/</guid>
      <description>This posts unlike previous posts is just a collection of all the updates from my gsoc project. Recently I have been working on setting up the infrastructure to contain public and private keys for the gpg process to use. A few problems that I encountered were:  How do list owner create keys? What parameters? Which address? The solution to this came down to gpg defaults, i.e. (size=2048, type=RSA). I don&#39;t think it is wise to impose a limit to the hashing algorithms used in the generation of the keys, although md5 is considered to be quite less secure we could only ask admins to not to use md5.</description>
    </item>
    
    <item>
      <title>Midterm Report</title>
      <link>https://asynchronous.in/2013/08/09/midterm-report/</link>
      <pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/08/09/midterm-report/</guid>
      <description>This is report of my GSoC project - OpenPG integration with GNU Mailman for midterm. The code is updated at my launchpad branch.  Accomplishments:   A signature rule(src/mailman/rules/signature.py) to check for OpenPGP signature in a message, incase the signature is found it tries to verify the message using gpg utility.  A gpg utility(src/mailman/utilities/gpg.py) to perform all the signature related tasks using `python-gnupg`(v0.3.4). It signs and verifies the signature.</description>
    </item>
    
    <item>
      <title>Are you mocking me?</title>
      <link>https://asynchronous.in/2013/07/19/are-you-mocking-me/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/07/19/are-you-mocking-me/</guid>
      <description>Unit testing is one of the most important parts of any project. TDD (test driven development) is a good habit to cultivate, in case you are not convinced, you don&#39;t know about TDD or you have never given it a try. I started using partial TDD recently, yes only partial for what I follow is that first I write a rough outline of the code, then I write tests and then I keep on re-factoring my code till all the tests are passing.</description>
    </item>
    
    <item>
      <title>Connect the DOT</title>
      <link>https://asynchronous.in/2013/07/19/connect-the-dot/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/07/19/connect-the-dot/</guid>
      <description>This post talks about dot program from graphviz suite. If you read my last post you may have noticed the dot graph that I made using the dot program from graphviz suite. It is a very easy to use program whose details can be read here at graphviz official website. I would like to share the code for the graph that I made for the last post:  digraph G { IN - approved; approved - emergency[label=&#34;</description>
    </item>
    
    <item>
      <title>Non-trivial unittests</title>
      <link>https://asynchronous.in/2013/07/19/non-trivial-unit-tests/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/07/19/non-trivial-unit-tests/</guid>
      <description>Unit tests are mostly trivial to write with only those assert statements over the expected results of the function (which is to be tested) instances. But sometimes it gets difficult to test some functions which require test data and the place where you store the data is not accessible in the tests.
 was trying to test my gpg utility which uses a home directory where all the public and secret key rings are stored(or supposed to be stored by default) whose hard-coded-path in my project is &#34;</description>
    </item>
    
    <item>
      <title>GNUPG and python</title>
      <link>https://asynchronous.in/2013/07/16/stuck-at-gnupg/</link>
      <pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/07/16/stuck-at-gnupg/</guid>
      <description>So this post talks about what gpg is, what are the various problems that can be solved using gpg and about python-gnupg library which can be used to sign a message or file using python
 For now python-gnupg allows detached signatures from file type objects, but what if we want to verify some text with a detached signature in the form on string in out application? StringIO module has been of some help but I am up researching how to use it better.</description>
    </item>
    
    <item>
      <title>Rules and Chains</title>
      <link>https://asynchronous.in/2013/06/30/rules-and-chains/</link>
      <pubDate>Sun, 30 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/06/30/rules-and-chains/</guid>
      <description>This post talks about the basic messaging flow in mailman and then a little detail about what are rules and chains in Mailman. So a message can be injected in mailman system using a LMTP server via LMTP. LMTP(Local Mail Transfer Protocol) is a derivative of ESMTP(Extended SMTP), which is a extension of well known SMTP(Simple Mail Transfer Protocol). LMTP runner parses the message into a tuple of type (mailing_list, message, message_data) and stores it in a serialized form called python pickle(.</description>
    </item>
    
    <item>
      <title>Gsoc 2013 - Pilot!</title>
      <link>https://asynchronous.in/2013/06/12/gosc-into/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2013/06/12/gosc-into/</guid>
      <description>In this post I will first start with my introduction in brief and then move on to my gsoc project. I am a undergrad student at Indian Institute of Technology, Kharagpur doing my majors in Department of Metallurgical and Materials Engineering expecting to pass out in 2015. This summer I will be working for GNU Mailman under Python Software Foundation for my gsoc project - Implementation of OpenPGP with Mailman.    While many of you might be aware about what OpenPGP/GPG is, but for those of you who don&#39;t I will try to introduce it in brief.</description>
    </item>
    
    <item>
      <title>What is ethical hacking?</title>
      <link>https://asynchronous.in/2012/01/12/ethical-hacking/</link>
      <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2012/01/12/ethical-hacking/</guid>
      <description>Wondering what is ethical hacking? The term hacking has been so much misinterpreted in common day language that people had to coin a new term called &#39;ethical hacking&#39;, just to be clear that all hackers do not rob-the-bank. So what does the term hacker actually mean? Simply that i am a curious person who likes to peep in other&#39;s codes or scribble an entirely new one. Did you ever heard of the term &#39;ethical barber&#39;,&#39;ethical librarian&#39;,ethical doctor&#39;?</description>
    </item>
    
    <item>
      <title>Why plain-text email?</title>
      <link>https://asynchronous.in/2012/01/07/plain-text-email/</link>
      <pubDate>Sat, 07 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2012/01/07/plain-text-email/</guid>
      <description>Some people wonder if an email sent as HTML is really as good as it looks with funky fonts, variying text heights and colors, blinking words and what not. But just think, is email really meant to beautify? Is email a convenient and lightning fast communication tool or an exhibition of sender&#39;s art and creativity? I guess you already know the answers. HTML email may look very good on the sender&#39;s computer, but it may look sometimes disastrous on recipeint&#39;s.</description>
    </item>
    
    <item>
      <title>First Commit</title>
      <link>https://asynchronous.in/2011/12/02/first-commit/</link>
      <pubDate>Fri, 02 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://asynchronous.in/2011/12/02/first-commit/</guid>
      <description>I am not much of a blogger but i started this weblog so that i keep writing and also to improve coding skills. This site is based on Jekyll, a ruby based static site generator. Since this is my first post i would write a little about myself. I am not a hardcore hacker. A little geeky guy with a good sense of humour. I love working in linux. Currently i am using debian.</description>
    </item>
    
  </channel>
</rss>